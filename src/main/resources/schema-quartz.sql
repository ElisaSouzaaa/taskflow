-- Quartz Scheduler schema para SQL Server (versão moderna)
-- Compatível com SQL Server 2012 ou superior
USE taskflow_db;

-- -- =============== DROP TABLES (SE EXISTIREM). SE QUISER QUE OS DADOS NÃO PERSISTAM, DESCOMENTE ===============
-- IF OBJECT_ID(N'QRTZ_FIRED_TRIGGERS', N'U') IS NOT NULL DROP TABLE QRTZ_FIRED_TRIGGERS;
-- IF OBJECT_ID(N'QRTZ_PAUSED_TRIGGER_GRPS', N'U') IS NOT NULL DROP TABLE QRTZ_PAUSED_TRIGGER_GRPS;
-- IF OBJECT_ID(N'QRTZ_SCHEDULER_STATE', N'U') IS NOT NULL DROP TABLE QRTZ_SCHEDULER_STATE;
-- IF OBJECT_ID(N'QRTZ_LOCKS', N'U') IS NOT NULL DROP TABLE QRTZ_LOCKS;
-- IF OBJECT_ID(N'QRTZ_SIMPLE_TRIGGERS', N'U') IS NOT NULL DROP TABLE QRTZ_SIMPLE_TRIGGERS;
-- IF OBJECT_ID(N'QRTZ_CRON_TRIGGERS', N'U') IS NOT NULL DROP TABLE QRTZ_CRON_TRIGGERS;
-- IF OBJECT_ID(N'QRTZ_SIMPROP_TRIGGERS', N'U') IS NOT NULL DROP TABLE QRTZ_SIMPROP_TRIGGERS;
-- IF OBJECT_ID(N'QRTZ_BLOB_TRIGGERS', N'U') IS NOT NULL DROP TABLE QRTZ_BLOB_TRIGGERS;
-- IF OBJECT_ID(N'QRTZ_TRIGGERS', N'U') IS NOT NULL DROP TABLE QRTZ_TRIGGERS;
-- IF OBJECT_ID(N'QRTZ_JOB_DETAILS', N'U') IS NOT NULL DROP TABLE QRTZ_JOB_DETAILS;
-- IF OBJECT_ID(N'QRTZ_CALENDARS', N'U') IS NOT NULL DROP TABLE QRTZ_CALENDARS;

-- =============== CREATE TABLES ===============

CREATE TABLE QRTZ_JOB_DETAILS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    JOB_NAME NVARCHAR(200) NOT NULL,
    JOB_GROUP NVARCHAR(200) NOT NULL,
    DESCRIPTION NVARCHAR(250) NULL,
    JOB_CLASS_NAME NVARCHAR(250) NOT NULL,
    IS_DURABLE BIT NOT NULL,
    IS_NONCONCURRENT BIT NOT NULL,
    IS_UPDATE_DATA BIT NOT NULL,
    REQUESTS_RECOVERY BIT NOT NULL,
    JOB_DATA VARBINARY(MAX) NULL,
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ_TRIGGERS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    JOB_NAME NVARCHAR(200) NOT NULL,
    JOB_GROUP NVARCHAR(200) NOT NULL,
    DESCRIPTION NVARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT NULL,
    PREV_FIRE_TIME BIGINT NULL,
    PRIORITY INT NULL,
    TRIGGER_STATE NVARCHAR(16) NOT NULL,
    TRIGGER_TYPE NVARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT NULL,
    CALENDAR_NAME NVARCHAR(200) NULL,
    MISFIRE_INSTR INT NULL,
    JOB_DATA VARBINARY(MAX) NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CRON_TRIGGERS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    CRON_EXPRESSION NVARCHAR(120) NOT NULL,
    TIME_ZONE_ID NVARCHAR(80),
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    STR_PROP_1 NVARCHAR(512) NULL,
    STR_PROP_2 NVARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 DECIMAL(13,4) NULL,
    DEC_PROP_2 DECIMAL(13,4) NULL,
    BOOL_PROP_1 BIT NULL,
    BOOL_PROP_2 BIT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_BLOB_TRIGGERS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    BLOB_DATA VARBINARY(MAX) NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CALENDARS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    CALENDAR_NAME NVARCHAR(200) NOT NULL,
    CALENDAR VARBINARY(MAX) NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
);

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_FIRED_TRIGGERS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    ENTRY_ID NVARCHAR(95) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    INSTANCE_NAME NVARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    SCHED_TIME BIGINT NOT NULL,
    PRIORITY INT NOT NULL,
    STATE NVARCHAR(16) NOT NULL,
    JOB_NAME NVARCHAR(200) NULL,
    JOB_GROUP NVARCHAR(200) NULL,
    IS_NONCONCURRENT BIT NULL,
    REQUESTS_RECOVERY BIT NULL,
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
);

CREATE TABLE QRTZ_SCHEDULER_STATE
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    INSTANCE_NAME NVARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
);

CREATE TABLE QRTZ_LOCKS
(
    SCHED_NAME NVARCHAR(120) NOT NULL,
    LOCK_NAME NVARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
);

-- =============== INDEXES ===============

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS (SCHED_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS (SCHED_NAME, NEXT_FIRE_TIME, TRIGGER_GROUP, TRIGGER_NAME);
CREATE INDEX IDX_QRTZ_T_GRP ON QRTZ_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_TRIG_INST_JOB ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RECOVERY ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_TIME ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, SCHED_TIME);
CREATE INDEX IDX_QRTZ_FT_TRIGGER_JOB ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_STATE ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, STATE);
CREATE INDEX IDX_QRTZ_FT_JOB_GROUP ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_SCHED_STATE ON QRTZ_SCHEDULER_STATE (SCHED_NAME, LAST_CHECKIN_TIME);